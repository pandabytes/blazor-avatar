@inherits BaseAvatarComponent

<img src="@_avatar" style="@Style" />

@code
{
  [InjectScope, AutoImportJsModule]
  private DiceBearWrapperJsModule _diceBearModule = null!;

  private string _avatar = string.Empty;

  /// <summary>
  /// The avatar style to choose from. List of valid
  /// styles are documented in here https://www.dicebear.com/styles/.
  /// </summary>
  [Parameter, EditorRequired]
  public string AvatarStyle { get; set; } = string.Empty;

  /// <summary>
  /// Default seed for the avatar to be generated.
  /// This is only used when <see cref="Options" />
  /// does not contain the key "seed". If it does,
  /// then this parameter is ignored.
  /// </summary>
  [Parameter]
  public string DefaultSeed { get; set; } = string.Empty;

  /// <summary>
  /// A dictionary that contains the options for the avatar
  /// such as hair style, beard, eye, etc. Each <see cref="AvatarStyle" />
  /// has a different set of options. To see a list of options
  /// per avatar style, please see https://www.dicebear.com/styles/.
  /// </summary>
  [Parameter]
  public IDictionary<string, object> Options { get; set; } = new Dictionary<string, object>();

  /// <inheritdoc />
  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    if (string.IsNullOrWhiteSpace(AvatarStyle))
    {
      throw new ArgumentException($"{nameof(AvatarStyle)} must not be empty.");
    }
  }

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    if (_diceBearModule.ModuleStatus == JsModuleStatus.Imported)
    {
      await SetAvatarAsync();
    }
  }

  /// <inheritdoc />
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (firstRender)
    {
      await SetAvatarAsync();
      StateHasChanged();
    }
  }

  private async Task SetAvatarAsync()
  {
    var modifiedOptions = Options;
    if (!string.IsNullOrWhiteSpace(DefaultSeed) && !Options.ContainsKey("seed"))
    {
      // Let's not change the parameter dictionary
      // This can cause confusion for our callers
      modifiedOptions = new Dictionary<string, object>(Options);
      modifiedOptions.Add("seed", DefaultSeed);
    }

    _avatar = await _diceBearModule.GenerateAvatarAsync(AvatarStyle, modifiedOptions);
  }
}
