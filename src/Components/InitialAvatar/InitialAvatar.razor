@inherits OwningComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime
@inject InitialAvatarJsModule InitialAvatarModule

<img src="@_url" style="@Style" width=@Size height=@Size />

@code
{
  private string _url = string.Empty;

  [Parameter, EditorRequired]
  public string FirstName { get; set; } = string.Empty;

  [Parameter, EditorRequired]
  public string LastName { get; set; } = string.Empty;

  [Parameter]
  public string FillColor { get; set; } = string.Empty;

  [Parameter]
  public string Style { get; set; } = string.Empty;

  /// <summary>
  /// Size of the avatar in which is also
  /// the width and height because the
  /// avatar is drawn in a square canvas.
  /// </summary>
  [Parameter]
  public int Size { get; set; } = 60;

  protected override async Task OnInitializedAsync()
    => await InitialAvatarModule.LoadModuleAsync();

  protected override async Task OnParametersSetAsync()
  {
    if (string.IsNullOrWhiteSpace(FirstName))
    {
      throw new ArgumentException($"{nameof(FirstName)} must not be empty.");
    }

    if (string.IsNullOrWhiteSpace(LastName))
    {
      throw new ArgumentException($"{nameof(LastName)} must not be empty.");
    }

    if (!string.IsNullOrWhiteSpace(FillColor))
    {
      var isValidColor = await InitialAvatarModule.IsValidColorAsync(FillColor);
      if (!isValidColor)
      {
        throw new ArgumentException($"{nameof(FillColor)} \"{FillColor}\" is an invalid color.");
      }
    }

    _url = await InitialAvatarModule.GetAvatarUrlAsync(FirstName, LastName, Size, FillColor);
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    // See https://github.com/dotnet/aspnetcore/issues/25873#issuecomment-884065550
    await (ScopedServices as IAsyncDisposable)!.DisposeAsync();
    GC.SuppressFinalize(this);
  }
}
