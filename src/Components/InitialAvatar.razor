@inject IJSRuntime JsRuntime
@implements IAsyncDisposable

<img src="@_url" style="@Style" width=@Size height=@Size />

@code
{
  /// <summary>
  /// This should not be null after OnInitializedAsync is called.
  /// </summary>
  private IJSObjectReference? _module = null;

  private string _url = string.Empty;

  [Parameter, EditorRequired]
  public string FirstName { get; set; } = string.Empty;

  [Parameter, EditorRequired]
  public string LastName { get; set; } = string.Empty;

  [Parameter]
  public string FillColor { get; set; } = string.Empty;

  [Parameter]
  public string Style { get; set; } = string.Empty;

  /// <summary>
  /// Size of the avatar in which is also
  /// the width and height because the
  /// avatar is drawn in a square canvas.
  /// </summary>
  [Parameter]
  public int Size { get; set; } = 60;

  protected override async Task OnInitializedAsync()
  {
    var libraryName = typeof(InitialAvatar).Assembly.GetName().Name;
    var jsFilePath = $"./_content/{libraryName}/initial-avatar.js";
    _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", jsFilePath);
  }

  protected override async Task OnParametersSetAsync()
  {
    if (string.IsNullOrWhiteSpace(FirstName))
    {
      throw new ArgumentException($"{nameof(FirstName)} must not be empty.");
    }

    if (string.IsNullOrWhiteSpace(LastName))
    {
      throw new ArgumentException($"{nameof(LastName)} must not be empty.");
    }

    if (!string.IsNullOrWhiteSpace(FillColor))
    {
      var isValidColor = await IsValidColorAsync(FillColor);
      if (!isValidColor)
      {
        throw new ArgumentException($"{nameof(FillColor)} \"{FillColor}\" is an invalid color.");
      }
    }

    _url = await GetAvatarUrlAsync(FirstName, LastName, Size, FillColor);
  }

  private async Task<bool> IsValidColorAsync(string color)
    => await _module!.InvokeAsync<bool>("isValidColor", color);

  private async Task<string> GetAvatarUrlAsync(string firstName, string lastName, int size, string fillColor)
    => await _module!.InvokeAsync<string>("getAvatarUrl", firstName, lastName, size, fillColor);

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    // Component disposal can happen before/during component
    // initialization according to:
    // https://learn.microsoft.com/en-us/aspnet/core/blazor/components/lifecycle?view=aspnetcore-7.0#component-disposal-with-idisposable-and-iasyncdisposable
    // Hence we must explicitly check for null here
    if (_module is not null)
    {
      await _module.DisposeAsync();
    }
  }
}
