@inherits BaseComponent
@inject IJSRuntime JsRuntime
@* @inject InitialAvatarJsModule InitialAvatarModule *@

<img src="@_url" style="@Style" width=@Size height=@Size />

@code
{
  private string _url = string.Empty;

  [InjectScopeService]
  private InitialAvatarJsModule _initialAvatarModule = null!;

  /// <summary>
  /// First name for the avatar.
  /// Only the first character will be used.
  /// </summary>
  [Parameter, EditorRequired]
  public string FirstName { get; set; } = string.Empty;

  /// <summary>
  /// Last name for the avatar.
  /// Only the first character will be used.
  /// </summary>
  [Parameter, EditorRequired]
  public string LastName { get; set; } = string.Empty;

  /// <summary>
  /// Fill color of the initial avatar.
  /// Random color will be used if not provided.
  /// </summary>
  [Parameter]
  public string FillColor { get; set; } = string.Empty;

  /// <summary>
  /// Additional style to the component.
  /// </summary>
  [Parameter]
  public string Style { get; set; } = string.Empty;

  /// <summary>
  /// Size of the avatar (pixel) in which is
  /// also the width and height because the
  /// avatar is drawn in a square canvas.
  /// </summary>
  [Parameter]
  public int Size { get; set; } = 60;

  protected override async Task OnInitializedAsync()
    => await _initialAvatarModule.LoadModuleAsync();

  protected override async Task OnParametersSetAsync()
  {
    if (string.IsNullOrWhiteSpace(FirstName))
    {
      throw new ArgumentException($"{nameof(FirstName)} must not be empty.");
    }

    if (string.IsNullOrWhiteSpace(LastName))
    {
      throw new ArgumentException($"{nameof(LastName)} must not be empty.");
    }

    if (Size < 0)
    {
      throw new ArgumentException($"{nameof(Size)} must be at least 0.");
    }

    if (!string.IsNullOrWhiteSpace(FillColor))
    {
      var isValidColor = await _initialAvatarModule.IsValidColorAsync(FillColor);
      if (!isValidColor)
      {
        throw new ArgumentException($"{nameof(FillColor)} \"{FillColor}\" is an invalid color.");
      }
    }

    _url = await _initialAvatarModule.GetAvatarUrlAsync(FirstName, LastName, Size, FillColor);
  }
}
