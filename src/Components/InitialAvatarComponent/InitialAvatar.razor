@inherits BaseAvatarComponent

<img src="@_url" style="@Style" width=@Size height=@Size />

@code
{
  private string _url = string.Empty;

  [InjectScope, AutoImportJsModule]
  private InitialAvatarJsModule _initialAvatarModule = null!;

  /// <summary>
  /// First name for the avatar.
  /// Only the first character will be used.
  /// </summary>
  [Parameter, EditorRequired]
  public string FirstName { get; set; } = string.Empty;

  /// <summary>
  /// Last name for the avatar.
  /// Only the first character will be used.
  /// </summary>
  [Parameter, EditorRequired]
  public string LastName { get; set; } = string.Empty;

  /// <summary>
  /// Fill color of the initial avatar.
  /// Random color will be used if not provided.
  /// If color is deemed invalid, this parameter
  /// will be set to emtpy string which is the
  /// same as if the parameter was not set.
  /// </summary>
  [Parameter]
  public string FillColor { get; set; } = string.Empty;

  /// <summary>
  /// Size of the avatar (pixel) in which is
  /// also the width and height because the
  /// avatar is drawn in a square canvas.
  /// </summary>
  [Parameter]
  public int Size { get; set; } = 60;

  /// <inheritdoc />
  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    if (string.IsNullOrWhiteSpace(FirstName))
    {
      throw new ArgumentException($"{nameof(FirstName)} must not be empty.");
    }

    if (string.IsNullOrWhiteSpace(LastName))
    {
      throw new ArgumentException($"{nameof(LastName)} must not be empty.");
    }

    if (Size < 0)
    {
      throw new ArgumentException($"{nameof(Size)} must be at least 0.");
    }
  }

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();

    if (_initialAvatarModule.ModuleStatus == JsModuleStatus.Imported)
    {
      await SetUrlAsync();
    }
  }

  /// <inheritdoc />
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);

    if (firstRender)
    {
      // First time to set the url so we have
      // to re-render
      await SetUrlAsync();
      StateHasChanged();
    }
  }

  private async Task SetUrlAsync()
  {
    var fillColor = FillColor;
    if (!string.IsNullOrWhiteSpace(FillColor))
    {
      var isValidColor = await _initialAvatarModule.IsValidColorAsync(FillColor);
      if (!isValidColor)
      {
        fillColor = string.Empty;
      }
    }

    _url = await _initialAvatarModule.GetAvatarUrlAsync(FirstName, LastName, Size, fillColor);
  }
}
