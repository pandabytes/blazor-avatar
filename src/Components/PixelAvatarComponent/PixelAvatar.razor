@inherits OwningComponentBase
@implements IAsyncDisposable
@inject MinidenticonsJsModule MinidenticonsModule

@((MarkupString)_pixelAvatar)

@code
{
  private static readonly HtmlParser HtmlParser = new();

  private string _pixelAvatar = "<svg></svg>";

  /// <summary>
  /// </summary>
  [Parameter, EditorRequired]
  public string Username { get; set; } = string.Empty;

  /// <summary>
  /// </summary>
  [Parameter]
  public int? Saturation { get; set; } = null;

  /// <summary>
  /// </summary>
  [Parameter]
  public int? Lightness { get; set; } = null;

  /// <summary>
  /// </summary>
  [Parameter]
  public Func<string, int>? HashFunc { get; set; } = null;

  /// <summary>
  /// </summary>
  [Parameter]
  public string Style { get; set; } = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    await MinidenticonsModule.LoadModuleAsync();

    var htmlSvg = await MinidenticonsModule.MinidenticonAsync(
      Username,
      Saturation,
      Lightness,
      HashFunc
    );

    _pixelAvatar = GetSvgWithStyle(htmlSvg, Style);
  }

  /// <inhereitdoc />
  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    // See https://github.com/dotnet/aspnetcore/issues/25873#issuecomment-884065550
    await (ScopedServices as IAsyncDisposable)!.DisposeAsync();
    GC.SuppressFinalize(this);
  }

  private static string GetSvgWithStyle(string htmlSvg, string style)
  {
    var document = HtmlParser.ParseDocument(htmlSvg);
    var svg = document.QuerySelector("svg");
    _ = svg ?? throw new ArgumentException("Expected HTML string to have tag <svg>.");

    svg.SetAttribute("style", style);
    return svg.ToHtml();
  }
}
