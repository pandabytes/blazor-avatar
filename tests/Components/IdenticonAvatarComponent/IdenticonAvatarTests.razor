@inherits BaseAvatarComponentTest

@code
{
  protected override string ModulePath => "https://cdn.jsdelivr.net/npm/minidenticons@4.2.1/minidenticons.min.js";

  private const string MinidenticonMethod = "minidenticon";

  [InlineData("")]
  [InlineData("    ")]
  [Theory]
  public void IdenticonAvatar_UsernameIsEmpty_ThrowsException(string username)
  {
    Assert.Throws<ArgumentException>(()
      => Render(@<IdenticonAvatar Username=@username />));
  }

  [InlineData(-500)]
  [InlineData(-1)]
  [InlineData(101)]
  [InlineData(500)]
  [Theory]
  public void IdenticonAvatar_SaturationIsOutOfRange_ThrowsException(int saturation)
  {
    Assert.Throws<ArgumentException>(()
      => Render(@<IdenticonAvatar Username="John" Saturation=@saturation />));
  }

  [InlineData(-500)]
  [InlineData(-1)]
  [InlineData(101)]
  [InlineData(500)]
  [Theory]
  public void IdenticonAvatar_LightnessIsOutOfRange_ThrowsException(int lightness)
  {
    Assert.Throws<ArgumentException>(()
      => Render(@<IdenticonAvatar Username="John" Lightness=@lightness />));
  }

  [Fact]
  public void IdenticonAvatar_EmptyStyle_NoStyleSet()
  {
    // Arrange
    _mockJsModule.Setup<string>(MinidenticonMethod, _ => true);

    // Act
    var cut = Render(@<IdenticonAvatar Username="John" />);

    // Assert
    var svgAttributes = cut.Find("svg").GetAttributesAsDict();
    Assert.DoesNotContain("style", svgAttributes);
  }

  [Fact]
  public void IdenticonAvatar_StyleIsProvided_StyleIsSet()
  {
    // Arrange
    const string style = "border-radius: 50%";
    _mockJsModule
      .Setup<string>(MinidenticonMethod, _ => true)
      .SetResult("<svg></svg>");

    // Act
    var cut = Render(@<IdenticonAvatar Username="John" Style=@style />);

    // Assert
    var svgAttributes = cut.Find("svg").GetAttributesAsDict();
    Assert.Contains("style", svgAttributes);
    Assert.Equal(style, svgAttributes["style"]);
  }
}
