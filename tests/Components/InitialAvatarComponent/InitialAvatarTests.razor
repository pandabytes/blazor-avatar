@inherits BaseAvatarComponentTest

@code
{
  protected override string ModulePath => "./_content/Blazor.Avatar/js/Components/InitialAvatarComponent/initial-avatar.js";

  private const string GetAvatarUrlMethod = "getAvatarUrl";

  private const string IsValidColorMethod = "isValidColor";

  [InlineData("")]
  [InlineData("    ")]
  [Theory]
  public void InitialAvatar_FirstNameIsEmpty_ThrowsException(string firstName)
  {
    Assert.Throws<ArgumentException>(()
      => Render(@<InitialAvatar FirstName=@firstName LastName="Doe" />));
  }

  [InlineData("")]
  [InlineData("    ")]
  [Theory]
  public void InitialAvatar_LastNameIsEmpty_ThrowsException(string lastName)
  {
    Assert.Throws<ArgumentException>(()
      => Render(@<InitialAvatar FirstName="John" LastName=@lastName />));
  }

  [Fact]
  public void InitialAvatar_InvalidFillColor_ThrowsException()
  {
    // Arrange
    const string color = "invalid-color";
    _mockJsModule
      .Setup<bool>(IsValidColorMethod, color)
      .SetResult(false);

    _mockJsModule.Setup<string>(GetAvatarUrlMethod, _ => true);

    // Act
    var cut = Render(@<InitialAvatar FirstName="John" LastName="Doe" FillColor=@color />);
    
    // Assert
    var initialAvatar = cut.FindComponent<InitialAvatar>();
    Assert.Empty(initialAvatar.Instance.FillColor);
  }

  [InlineData(-1)]
  [InlineData(-10)]
  [Theory]
  public void InitialAvatar_InvalidSize_ThrowsException(int size)
  {
    Assert.Throws<ArgumentException>(()
      => Render(@<InitialAvatar FirstName="John" LastName="Doe" Size=@size />));
  }

  [Fact]
  public void InitialAvatar_ValidParameters_RenderSuccessfully()
  {
    // Arrange
    const string color = "red";
    const string firstName = "John";
    const string lastName = "Doe";
    const int size = 10;
    var expectedSrc = $"{color}-{firstName}-{lastName}-{size}";

    _mockJsModule
      .Setup<bool>(IsValidColorMethod, color)
      .SetResult(true);

    _mockJsModule
      .Setup<string>(GetAvatarUrlMethod, firstName, lastName, size, color)
      .SetResult(expectedSrc);

    // Act
    var cut = Render(@<InitialAvatar FirstName=@firstName 
                                     LastName=@lastName
                                     FillColor=@color
                                     Size=@size />);

    // Assert
    var imgAttributes = cut.Find("img").GetAttributesAsDict();

    Assert.Contains("src", imgAttributes);
    Assert.Contains("width", imgAttributes);
    Assert.Contains("height", imgAttributes);

    Assert.Equal(expectedSrc, imgAttributes["src"]);
    Assert.Equal(size.ToString(), imgAttributes["width"]);
    Assert.Equal(imgAttributes["width"], imgAttributes["height"]);
  }
}
